import os
from fastapi import FastAPI, UploadFile, File, Depends, HTTPException, Header
from sqlalchemy.orm import Session
from database import SessionLocal, engine
from database import Base
from models import FileMetadata
from fastapi.middleware.cors import CORSMiddleware
from typing import List

# Firebase
import firebase_admin
from firebase_admin import credentials, auth, firestore


# Kh·ªüi t·∫°o Firebase Admin SDK b·∫±ng bi·∫øn m√¥i tr∆∞·ªùng
from dotenv import load_dotenv
load_dotenv()
service_account_info = {
    "type": "service_account",
    "project_id": os.getenv("GOOGLE_PROJECT_ID"),
    "private_key_id": os.getenv("GOOGLE_PRIVATE_KEY_ID"),
    "private_key": os.getenv("GOOGLE_PRIVATE_KEY").replace('\\n', '\n'),
    "client_email": os.getenv("GOOGLE_CLIENT_EMAIL"),
    "client_id": os.getenv("GOOGLE_CLIENT_ID"),
    "auth_uri": os.getenv("GOOGLE_AUTH_URI"),
    "token_uri": os.getenv("GOOGLE_TOKEN_URI"),
    "auth_provider_x509_cert_url": os.getenv("GOOGLE_AUTH_PROVIDER_X509_CERT_URL"),
    "client_x509_cert_url": os.getenv("GOOGLE_CLIENT_X509_CERT_URL"),
    "universe_domain": os.getenv("GOOGLE_UNIVERSE_DOMAIN"),
}
cred = credentials.Certificate(service_account_info)
firebase_admin.initialize_app(cred)
firestore_client = firestore.client()

# üìÇ Th∆∞ m·ª•c l∆∞u file upload
UPLOAD_DIR = "uploaded_files"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# üöÄ Kh·ªüi t·∫°o FastAPI
app = FastAPI()

# üåê Cho ph√©p CORS t·ª´ frontend
frontend_origin = os.getenv("FRONTEND_ORIGIN", "http://127.0.0.1:5501")
app.add_middleware(
    CORSMiddleware,
    allow_origins=[frontend_origin],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üì¶ T·∫°o b·∫£ng metadata n·∫øu ch∆∞a c√≥
Base.metadata.create_all(bind=engine)

# üõ† Dependency m·ªü session DB
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ‚úÖ X√°c th·ª±c ng∆∞·ªùi d√πng b·∫±ng Firebase ID Token + T·ª± ƒë·ªông t·∫°o role n·∫øu ch∆∞a c√≥
async def get_current_user(authorization: str = Header(...)):
    if not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Thi·∫øu Bearer token")

    token = authorization.split(" ")[1]
    try:
        decoded_token = auth.verify_id_token(token)
        uid = decoded_token["uid"]
        email = decoded_token.get("email")

        doc_ref = firestore_client.collection("role").document(uid)
        doc = doc_ref.get()

        if doc.exists:
            role = doc.to_dict().get("role", "user")
        else:
            # üîß N·∫øu ch∆∞a c√≥ role -> m·∫∑c ƒë·ªãnh l√† "user" v√† l∆∞u l·∫°i
            role = "user"
            doc_ref.set({
                "role": role,
                "email": email
            })

        return {
            "uid": uid,
            "email": email,
            "role": role
        }

    except Exception as e:
        print("‚ùå L·ªói x√°c th·ª±c:", e)
        raise HTTPException(status_code=401, detail="Token kh√¥ng h·ª£p l·ªá")

# ‚úÖ API Upload - ch·ªâ cho ph√©p Admin
@app.post("/upload/")
async def upload_file(
    file: UploadFile = File(...),
    db: Session = Depends(get_db),
    user=Depends(get_current_user),
):
    if user["role"] != "admin":
        raise HTTPException(status_code=403, detail="Ch·ªâ admin m·ªõi ƒë∆∞·ª£c upload")

    file_location = os.path.join(UPLOAD_DIR, file.filename)
    with open(file_location, "wb") as f:
        f.write(await file.read())

    metadata = FileMetadata(
        file_name=file.filename,
        file_path=file_location,
        file_size=os.path.getsize(file_location),
    )
    db.add(metadata)
    db.commit()
    db.refresh(metadata)

    return {
        "message": "Upload th√†nh c√¥ng!",
        "file_id": metadata.id,
        "filename": metadata.file_name
    }

# ‚úÖ API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
@app.get("/whoami")
async def whoami(user=Depends(get_current_user)):
    return {
        "uid": user["uid"],
        "email": user["email"],
        "role": user["role"]
    }

# ‚úÖ API l·∫•y danh s√°ch file (ai c≈©ng truy c·∫≠p ƒë∆∞·ª£c)
@app.get("/files/")
async def list_files(db: Session = Depends(get_db)):
    files = db.query(FileMetadata).all()
    return [
        {
            "id": f.id,
            "filename": f.file_name,
            "file_size": f.file_size,
            "uploaded_at": f.upload_time,
            "file_path": f.file_path
        }
        for f in files
    ]
